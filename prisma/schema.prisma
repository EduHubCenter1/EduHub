// ======================================
//  SCHEMA PRISMA (bas√© sur ton Supabase)
// ======================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model User {
  id        String   @id
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  email     String   @unique
  role      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Relations
  adminScopes       AdminScope[]
  uploadedResources Resource[] @relation("UserResources")

  @@map("users")
  @@schema("public")
}

model AdminScope {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  userId         String   @map("user_id") @db.Uuid
  fieldId        String   @map("field_id")
  semesterNumber Int      @map("semester_number")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  field  Field  @relation(fields: [fieldId], references: [id])

  @@map("admin_scopes")
  @@schema("public")
}

model Field {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  name        String
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")

  // Relations
  semesters   Semester[]
  adminScopes AdminScope[]

  @@map("fields")
  @@schema("public")
}

model Semester {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  number    Int
  fieldId   String   @map("field_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Relations
  field    Field    @relation(fields: [fieldId], references: [id])
  modules  Module[]

  @@map("semesters")
  @@schema("public")
}

model Module {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  name        String
  slug        String
  semesterId  String   @map("semester_id")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // Relations
  semester   Semester @relation(fields: [semesterId], references: [id])
  submodules Submodule[]

  @@map("modules")
  @@schema("public")
}

model Submodule {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  name        String
  slug        String
  moduleId    String   @map("module_id")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // Relations
  module     Module     @relation(fields: [moduleId], references: [id])
  resources  Resource[]

  @@map("submodules")
  @@schema("public")
}

model Resource {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  title           String
  type            String
  description     String?
  fileUrl         String   @map("file_url")
  fileExt         String   @map("file_ext")
  mimeType        String   @map("mime_type")
  sizeBytes       Int      @map("size_bytes")
  sha256          String
  submoduleId     String   @map("submodule_id")
  uploadedByUserId String   @map("uploaded_by_user_id") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")

  // Relations
  submodule Submodule @relation(fields: [submoduleId], references: [id])
  uploadedBy User     @relation("UserResources", fields: [uploadedByUserId], references: [id])

  @@map("resources")
  @@schema("public")
}
